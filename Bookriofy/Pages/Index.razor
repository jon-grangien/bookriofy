@page "/"
@inject BookriofyGraphqlClient BookriofyGraphqlClient;
@implements IDisposable

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<p>Books</p>
<ul>
	@foreach (var book in books)
	{
		<li><button @onclick="() => OnClickBook(book)"><span class="oi oi-pencil mr-2" aria-hidden="true"></span></button>
			@book.Title</li>
	}
</ul>

<p>Authors</p>
<ul>
	@foreach (var author in authors)
	{
		<li>@author.Name, @author.Bio</li>
	}
</ul>

@if (selectedBook is not null)
{
	<br />
	<p>Edit Book Title:</p>
	<input @bind-value="@title" />
	<button @onclick="OnSaveTitle">Save</button>
}

<br />
<p>Add author</p>
<input @bind-value="@newAuthorName" />
<input @bind-value="@newAuthorBio" />
<button @onclick="OnAddAuthor">Add</button>

<br />
<p>Add book</p>
<input @bind-value="@newBookTitle" />
<input @bind-value="@newBookDesc" />
<input @bind-value="@newBookAuthorId" />
<button @onclick="OnAddBook">Add</button>

@code {
	private IReadOnlyList<IBookSimple> books = Array.Empty<IBookSimple>();
	private IReadOnlyList<IAuthorSimple> authors = Array.Empty<IAuthorSimple>();
	private IBookSimple selectedBook;
	private IDisposable storeBooks;
	private IDisposable storeAuthors;
	private string title;

	private string newAuthorName;
	private string newAuthorBio;
	private string newBookTitle;
	private string newBookDesc;
	private int? newBookAuthorId;


	protected override void OnInitialized()
	{
		FetchBooks();
		FetchAuthors();
	}

	private void FetchBooks()
	{
		storeBooks = BookriofyGraphqlClient
		.GetBooks
		.Watch(StrawberryShake.ExecutionStrategy.CacheFirst)
		.Where(t => !t.Errors.Any())
		.Select(t => t?.Data?.Books)
		.Subscribe(result =>
		{
			if (result != null)
			{
				books = result;
			}
			StateHasChanged();
		});
	}

	private void FetchAuthors()
	{
		storeAuthors = BookriofyGraphqlClient
		.GetAuthors
		.Watch(StrawberryShake.ExecutionStrategy.CacheFirst)
		.Where(t => !t.Errors.Any())
		.Select(t => t?.Data?.Authors)
		.Subscribe(result =>
		{
			if (result != null)
			{
				authors = result;
			}
			StateHasChanged();
		});
	}

	private void OnClickBook(IBookSimple book)
	{
		selectedBook = book;
		title = book.Title;
		StateHasChanged();
	}

	private async Task OnSaveTitle()
	{
		await BookriofyGraphqlClient.RenameBook.ExecuteAsync(selectedBook.Id.ToString(), title);
		selectedBook = null;
		title = null;
		StateHasChanged();
	}

	private async Task OnAddAuthor()
	{
		await BookriofyGraphqlClient.AddAuthor.ExecuteAsync(newAuthorName, newAuthorBio);
		newAuthorName = null;
		newAuthorBio = null;
		StateHasChanged();
	}

	private async Task OnAddBook()
	{
		if (newBookTitle is null || newBookDesc is null || newBookAuthorId is null)
		{
			return;
		}

		await BookriofyGraphqlClient.AddBook.ExecuteAsync(newBookTitle, newBookDesc, newBookAuthorId.ToString());
		newBookTitle = null;
		newBookDesc = null;
		newBookAuthorId = null;
		StateHasChanged();
	}

	public void Dispose()
	{
		storeBooks?.Dispose();
		storeAuthors?.Dispose();
	}
}