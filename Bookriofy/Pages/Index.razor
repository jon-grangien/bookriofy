@page "/"
@inject BookriofyGraphqlClient BookriofyGraphqlClient;
@implements IDisposable
@using Bookriofy.Data

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<p>Books</p>
<ul>
	@foreach (var book in books)
	{
		<li><button @onclick="() => OnClickBook(book)"><span class="oi oi-pencil mr-2" aria-hidden="true"></span></button>
			@book.Title</li>
	}
</ul>

<p>Authors</p>
<ul>
	@foreach (var author in authors)
	{
		<li><button @onclick="() => OnClickDeleteAuthor(author)"><span class="oi oi-trash mr-2"
				aria-hidden="true"></span></button>
			@author.Name, @author.Bio</li>
	}
</ul>

@if (selectedBook is not null)
{
	<br />
	<p>Edit Book Title:</p>
	<input @bind-value="@title" />
	<button @onclick="OnSaveTitle">Save</button>
}

<br />
<p>Add author</p>
<input @bind-value="@newAuthorName" />
<input @bind-value="@newAuthorBio" />
<button @onclick="OnAddAuthor">Add</button>

<br />
<p>Add book</p>
<input @bind-value="@newBookTitle" />
<input @bind-value="@newBookDesc" />
<input @bind-value="@newBookAuthorId" />
<button @onclick="OnAddBook">Add</button>

@code {
	private List<ViewBook> books = new List<ViewBook>();
	private List<ViewAuthor> authors = new List<ViewAuthor>();
	private ViewBook selectedBook;
	private IDisposable storeBooks;
	private IDisposable storeAuthors;
	private IDisposable storeAuthorAdded;
	private IDisposable storeAuthorRemoved;
	private IDisposable storeBooksRemoved;
	private string title;

	private string newAuthorName;
	private string newAuthorBio;
	private string newBookTitle;
	private string newBookDesc;
	private int? newBookAuthorId;


	protected override void OnInitialized()
	{
		FetchBooks();
		FetchAuthors();
		SubscribeToAddedAuthors();
		SubscribeToRemovedAuthor();
		SubscribeToRemovedBook();
	}

	private void FetchBooks()
	{
		storeBooks = BookriofyGraphqlClient
		.GetBooks
		.Watch(StrawberryShake.ExecutionStrategy.CacheFirst)
		.Where(t => !t.Errors.Any())
		.Select(t => t?.Data?.Books)
		.Subscribe(result =>
		{
			if (result != null)
			{
				books = new List<ViewBook>();
				foreach (var r in result)
				{
					books.Add(new ViewBook
					{
						Id = r.Id,
						Title = r.Title,
						Description = r?.Description,
						AuthorId = r.Author.Id
					});
				}
			}
			StateHasChanged();
		});
	}

	private void FetchAuthors()
	{
		storeAuthors = BookriofyGraphqlClient
		.GetAuthors
		.Watch(StrawberryShake.ExecutionStrategy.CacheFirst)
		.Where(t => !t.Errors.Any())
		.Select(t => t?.Data?.Authors)
		.Subscribe(results =>
		{
			if (results != null)
			{
				foreach (var result in results)
				{
					authors.Add(new ViewAuthor
					{
						Id = result.Id,
						Name = result.Name,
						Bio = result?.Bio
					});
				}

				Console.WriteLine("Authors ids: " + authors.Select(a => a.Id).ToString());
			}
			StateHasChanged();
		});
	}

	private void SubscribeToAddedAuthors()
	{
		storeAuthorAdded = BookriofyGraphqlClient
		.OnAuthorAdded
		.Watch()
		.Subscribe(result =>
		{
			if (result?.Data != null)
			{
				authors.Add(new ViewAuthor
				{
					Id = result.Data.AuthorAdded.Id,
					Name = result.Data.AuthorAdded.Name,
					Bio = result.Data.AuthorAdded.Bio
				});
				StateHasChanged();
			}
		});
	}

	private void SubscribeToRemovedAuthor()
	{
		storeAuthorRemoved = BookriofyGraphqlClient
		.OnAuthorRemoved
		.Watch()
		.Subscribe(result =>
		{
			if (result?.Data != null)
			{
				authors = authors.Where(a => a.Id != result.Data.AuthorRemoved.Id).ToList();
				StateHasChanged();
			}
		});
	}

	private void SubscribeToRemovedBook()
	{
		storeBooksRemoved = BookriofyGraphqlClient
		.OnBookRemoved
		.Watch()
		.Subscribe(result =>
		{
			if (result?.Data != null)
			{
				books = books.Where(b => b.Id != result?.Data.BookRemoved.Id).ToList();
				StateHasChanged();
			}
		});
	}

	private void OnClickBook(ViewBook book)
	{
		selectedBook = book;
		title = book.Title;
		StateHasChanged();
	}

	private async Task OnSaveTitle()
	{
		await BookriofyGraphqlClient.RenameBook.ExecuteAsync(selectedBook.Id.ToString(), title);
		selectedBook = null;
		title = null;
		StateHasChanged();
	}

	private async Task OnAddAuthor()
	{
		await BookriofyGraphqlClient.AddAuthor.ExecuteAsync(newAuthorName, newAuthorBio);
		newAuthorName = null;
		newAuthorBio = null;
		StateHasChanged();
	}

	private async void OnClickDeleteAuthor(ViewAuthor author)
	{
		await BookriofyGraphqlClient.RemoveAuthor.ExecuteAsync(author.Id.ToString());
	}

	private async Task OnAddBook()
	{
		if (newBookTitle is null || newBookDesc is null || newBookAuthorId is null)
		{
			return;
		}

		await BookriofyGraphqlClient.AddBook.ExecuteAsync(newBookTitle, newBookDesc, newBookAuthorId.ToString());
		newBookTitle = null;
		newBookDesc = null;
		newBookAuthorId = null;
		StateHasChanged();
	}

	public void Dispose()
	{
		storeBooks?.Dispose();
		storeAuthors?.Dispose();
		storeAuthorAdded?.Dispose();
		storeAuthorRemoved?.Dispose();
		storeBooksRemoved?.Dispose();
	}
}