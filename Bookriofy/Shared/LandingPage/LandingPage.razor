@inject BookriofyGraphqlClient BookriofyGraphqlClient;
@implements IDisposable
@using AutoMapper
@using Bookriofy.Data

<section class="w-full h-[50vw] min-h-[1000px] bg-hero-1 bg-no-repeat bg-cover bg-center">
	<NavMenuSimple />
	<div class="w-full flex justify-center">
		<div
			class="flex flex-row flex-wrap items-center justify-between py-64 sm:w-full md:w-full lg:w-11/12 xl:w-9/12">
			<button
				class="py-8 px-12 bg-gradient-to-r from-[#75a9ca] to-[#699dbe] rounded-full text-5xl text-white drop-shadow-2xl">Log
				in really fast</button>
			<div>
				<p class="text-7xl text-white my-8">Inspiration</p>
				<p class="text-7xl text-white my-8">Travel</p>
				<p class="text-7xl text-white my-8">Self</p>
				<p class="text-md text-white my-8">Stories for the mind, soul and constant eco-perpetual improvement</p>
			</div>
		</div>
	</div>
</section>

<section class="w-full flex justify-center">
	<LandingPageHighlightAndReviews Books="@books" />
</section>

<section class="w-full mt-14 flex justify-center">
	<BooksMasonry Books="@books" />
</section>

@code {
	private List<Book> books = new List<Book>();
	private IDisposable? storeBooks;

	[Inject]
	protected IMapper Mapper { get; set; } = default!;

	protected override void OnInitialized()
	{
		FetchBooks();
	}

	private void FetchBooks()
	{
		storeBooks = BookriofyGraphqlClient
		.GetBooks
		.Watch(StrawberryShake.ExecutionStrategy.CacheFirst)
		.Where(t => !t.Errors.Any())
		.Select(t => t?.Data?.Books)
		.Subscribe(result =>
		{
			if (result != null)
			{
				books = new List<Book>();
				foreach (var r in result)
				{
					books.Add(Mapper.Map<Book>(r));
				}
			}
			StateHasChanged();
		});
	}

	public void Dispose()
	{
		storeBooks?.Dispose();
	}
}
